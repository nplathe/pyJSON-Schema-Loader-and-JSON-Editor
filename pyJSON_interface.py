# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'pyJSON_interface.ui'
##
## Created by: Qt User Interface Compiler version 6.5.1
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,
    QMetaObject, QObject, QPoint, QRect,
    QSize, QTime, QUrl, Qt)
from PySide6.QtGui import (QAction, QBrush, QColor, QConicalGradient,
    QCursor, QFont, QFontDatabase, QGradient,
    QIcon, QImage, QKeySequence, QLinearGradient,
    QPainter, QPalette, QPixmap, QRadialGradient,
    QTransform)
from PySide6.QtWidgets import (QAbstractItemView, QApplication, QComboBox, QHBoxLayout,
    QHeaderView, QLabel, QLayout, QMainWindow,
    QMenu, QMenuBar, QPushButton, QSizePolicy,
    QStatusBar, QTreeView, QVBoxLayout, QWidget)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        if not MainWindow.objectName():
            MainWindow.setObjectName(u"MainWindow")
        MainWindow.resize(1024, 768)
        sizePolicy = QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        self.actionOpen_JSON = QAction(MainWindow)
        self.actionOpen_JSON.setObjectName(u"actionOpen_JSON")
        self.actionAdd_Schema = QAction(MainWindow)
        self.actionAdd_Schema.setObjectName(u"actionAdd_Schema")
        self.actionPreferences = QAction(MainWindow)
        self.actionPreferences.setObjectName(u"actionPreferences")
        self.actionAbout = QAction(MainWindow)
        self.actionAbout.setObjectName(u"actionAbout")
        self.actionCreate_JSON_from_selected_Schema = QAction(MainWindow)
        self.actionCreate_JSON_from_selected_Schema.setObjectName(u"actionCreate_JSON_from_selected_Schema")
        self.actionValidate_input_against_selected_schema = QAction(MainWindow)
        self.actionValidate_input_against_selected_schema.setObjectName(u"actionValidate_input_against_selected_schema")
        self.actionSave_as_default = QAction(MainWindow)
        self.actionSave_as_default.setObjectName(u"actionSave_as_default")
        self.actionLoad_default_for_selected_schema = QAction(MainWindow)
        self.actionLoad_default_for_selected_schema.setObjectName(u"actionLoad_default_for_selected_schema")
        self.actionReload_JSON_and_drop_Changes = QAction(MainWindow)
        self.actionReload_JSON_and_drop_Changes.setObjectName(u"actionReload_JSON_and_drop_Changes")
        self.actionSave = QAction(MainWindow)
        self.actionSave.setObjectName(u"actionSave")
        self.actionSave_as = QAction(MainWindow)
        self.actionSave_as.setObjectName(u"actionSave_as")
        self.actionCheck_indexes = QAction(MainWindow)
        self.actionCheck_indexes.setObjectName(u"actionCheck_indexes")
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName(u"centralwidget")
        self.verticalLayout = QVBoxLayout(self.centralwidget)
        self.verticalLayout.setSpacing(2)
        self.verticalLayout.setContentsMargins(4, 4, 4, 4)
        self.verticalLayout.setObjectName(u"verticalLayout")
        self.HeaderLayout = QHBoxLayout()
        self.HeaderLayout.setSpacing(2)
        self.HeaderLayout.setObjectName(u"HeaderLayout")
        self.CurrLayout = QVBoxLayout()
        self.CurrLayout.setSpacing(2)
        self.CurrLayout.setObjectName(u"CurrLayout")
        self.CurrLayout.setSizeConstraint(QLayout.SetMaximumSize)
        self.CurrSchemLayout = QHBoxLayout()
        self.CurrSchemLayout.setSpacing(2)
        self.CurrSchemLayout.setObjectName(u"CurrSchemLayout")
        self.CurrSchemLayout.setSizeConstraint(QLayout.SetMaximumSize)
        self.CurrSchemLayout.setContentsMargins(-1, -1, -1, 0)
        self.curr_descr_label2 = QLabel(self.centralwidget)
        self.curr_descr_label2.setObjectName(u"curr_descr_label2")
        sizePolicy1 = QSizePolicy(QSizePolicy.Minimum, QSizePolicy.Preferred)
        sizePolicy1.setHorizontalStretch(0)
        sizePolicy1.setVerticalStretch(0)
        sizePolicy1.setHeightForWidth(self.curr_descr_label2.sizePolicy().hasHeightForWidth())
        self.curr_descr_label2.setSizePolicy(sizePolicy1)
        self.curr_descr_label2.setMaximumSize(QSize(100, 16777215))
        self.curr_descr_label2.setIndent(5)

        self.CurrSchemLayout.addWidget(self.curr_descr_label2)

        self.current_schema_combo_box = QComboBox(self.centralwidget)
        self.current_schema_combo_box.setObjectName(u"current_schema_combo_box")
        self.current_schema_combo_box.setMaximumSize(QSize(16777215, 16777215))

        self.CurrSchemLayout.addWidget(self.current_schema_combo_box)


        self.CurrLayout.addLayout(self.CurrSchemLayout)

        self.CurrDirLayout = QHBoxLayout()
        self.CurrDirLayout.setSpacing(2)
        self.CurrDirLayout.setObjectName(u"CurrDirLayout")
        self.Curr_dir_label = QLabel(self.centralwidget)
        self.Curr_dir_label.setObjectName(u"Curr_dir_label")
        sizePolicy1.setHeightForWidth(self.Curr_dir_label.sizePolicy().hasHeightForWidth())
        self.Curr_dir_label.setSizePolicy(sizePolicy1)
        self.Curr_dir_label.setMinimumSize(QSize(100, 0))
        self.Curr_dir_label.setMaximumSize(QSize(100, 16777215))
        self.Curr_dir_label.setIndent(5)

        self.CurrDirLayout.addWidget(self.Curr_dir_label)

        self.curr_dir_comboBox = QComboBox(self.centralwidget)
        self.curr_dir_comboBox.setObjectName(u"curr_dir_comboBox")
        self.curr_dir_comboBox.setMaximumSize(QSize(16777215, 16777215))

        self.CurrDirLayout.addWidget(self.curr_dir_comboBox)


        self.CurrLayout.addLayout(self.CurrDirLayout)

        self.CurrJSONLayout = QHBoxLayout()
        self.CurrJSONLayout.setSpacing(2)
        self.CurrJSONLayout.setObjectName(u"CurrJSONLayout")
        self.CurrJSONLayout.setSizeConstraint(QLayout.SetMaximumSize)
        self.curr_descr_label = QLabel(self.centralwidget)
        self.curr_descr_label.setObjectName(u"curr_descr_label")
        self.curr_descr_label.setMinimumSize(QSize(100, 20))
        self.curr_descr_label.setMaximumSize(QSize(100, 16777215))
        self.curr_descr_label.setIndent(5)

        self.CurrJSONLayout.addWidget(self.curr_descr_label)

        self.curr_json_label = QLabel(self.centralwidget)
        self.curr_json_label.setObjectName(u"curr_json_label")
        self.curr_json_label.setMinimumSize(QSize(0, 20))
        self.curr_json_label.setIndent(5)

        self.CurrJSONLayout.addWidget(self.curr_json_label)


        self.CurrLayout.addLayout(self.CurrJSONLayout)


        self.HeaderLayout.addLayout(self.CurrLayout)

        self.ButtonBarLayout = QHBoxLayout()
        self.ButtonBarLayout.setSpacing(2)
        self.ButtonBarLayout.setObjectName(u"ButtonBarLayout")
        self.ButtonBarLayout.setSizeConstraint(QLayout.SetMinimumSize)
        self.ButtonBarLayout.setContentsMargins(20, -1, 20, -1)
        self.pushButton_addSchema = QPushButton(self.centralwidget)
        self.pushButton_addSchema.setObjectName(u"pushButton_addSchema")
        self.pushButton_addSchema.setMinimumSize(QSize(40, 40))
        self.pushButton_addSchema.setMaximumSize(QSize(40, 40))

        self.ButtonBarLayout.addWidget(self.pushButton_addSchema)

        self.pushButton_search = QPushButton(self.centralwidget)
        self.pushButton_search.setObjectName(u"pushButton_search")
        self.pushButton_search.setMinimumSize(QSize(40, 40))
        self.pushButton_search.setMaximumSize(QSize(40, 40))

        self.ButtonBarLayout.addWidget(self.pushButton_search)

        self.pushButton_dirSel = QPushButton(self.centralwidget)
        self.pushButton_dirSel.setObjectName(u"pushButton_dirSel")
        self.pushButton_dirSel.setMinimumSize(QSize(40, 40))
        self.pushButton_dirSel.setMaximumSize(QSize(40, 40))

        self.ButtonBarLayout.addWidget(self.pushButton_dirSel)

        self.NOSBarLayout = QHBoxLayout()
        self.NOSBarLayout.setSpacing(2)
        self.NOSBarLayout.setObjectName(u"NOSBarLayout")
        self.NOSBarLayout.setSizeConstraint(QLayout.SetMinimumSize)
        self.NOSBarLayout.setContentsMargins(10, -1, 10, -1)
        self.pushButton_new = QPushButton(self.centralwidget)
        self.pushButton_new.setObjectName(u"pushButton_new")
        self.pushButton_new.setMinimumSize(QSize(40, 40))
        self.pushButton_new.setMaximumSize(QSize(40, 40))

        self.NOSBarLayout.addWidget(self.pushButton_new)

        self.pushButton_open = QPushButton(self.centralwidget)
        self.pushButton_open.setObjectName(u"pushButton_open")
        self.pushButton_open.setMinimumSize(QSize(40, 40))
        self.pushButton_open.setMaximumSize(QSize(40, 40))

        self.NOSBarLayout.addWidget(self.pushButton_open)

        self.pushButton_save = QPushButton(self.centralwidget)
        self.pushButton_save.setObjectName(u"pushButton_save")
        self.pushButton_save.setMinimumSize(QSize(40, 40))
        self.pushButton_save.setMaximumSize(QSize(40, 40))

        self.NOSBarLayout.addWidget(self.pushButton_save)


        self.ButtonBarLayout.addLayout(self.NOSBarLayout)


        self.HeaderLayout.addLayout(self.ButtonBarLayout)


        self.verticalLayout.addLayout(self.HeaderLayout)

        self.TreeView = QTreeView(self.centralwidget)
        self.TreeView.setObjectName(u"TreeView")
        self.TreeView.setEditTriggers(QAbstractItemView.AnyKeyPressed|QAbstractItemView.DoubleClicked|QAbstractItemView.EditKeyPressed|QAbstractItemView.SelectedClicked)

        self.verticalLayout.addWidget(self.TreeView)

        self.label_curDir = QLabel(self.centralwidget)
        self.label_curDir.setObjectName(u"label_curDir")
        self.label_curDir.setIndent(5)

        self.verticalLayout.addWidget(self.label_curDir)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(QRect(0, 0, 1024, 21))
        self.menuFile = QMenu(self.menubar)
        self.menuFile.setObjectName(u"menuFile")
        self.menuEdit = QMenu(self.menubar)
        self.menuEdit.setObjectName(u"menuEdit")
        self.menuHelp = QMenu(self.menubar)
        self.menuHelp.setObjectName(u"menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(MainWindow)
        self.statusbar.setObjectName(u"statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.menuFile.addAction(self.actionOpen_JSON)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSave_as)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionAdd_Schema)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionLoad_default_for_selected_schema)
        self.menuFile.addAction(self.actionSave_as_default)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionCheck_indexes)
        self.menuEdit.addAction(self.actionCreate_JSON_from_selected_Schema)
        self.menuEdit.addAction(self.actionValidate_input_against_selected_schema)
        self.menuEdit.addAction(self.actionReload_JSON_and_drop_Changes)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionPreferences)
        self.menuHelp.addAction(self.actionAbout)

        self.retranslateUi(MainWindow)

        QMetaObject.connectSlotsByName(MainWindow)
    # setupUi

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QCoreApplication.translate("MainWindow", u"MainWindow", None))
        self.actionOpen_JSON.setText(QCoreApplication.translate("MainWindow", u"Open JSON...", None))
#if QT_CONFIG(tooltip)
        self.actionOpen_JSON.setToolTip(QCoreApplication.translate("MainWindow", u"Open a JSON file for editing.", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionOpen_JSON.setStatusTip(QCoreApplication.translate("MainWindow", u"Open a JSON file for editing.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.actionOpen_JSON.setWhatsThis(QCoreApplication.translate("MainWindow", u"Open a JSON file for editing.", None))
#endif // QT_CONFIG(whatsthis)
        self.actionAdd_Schema.setText(QCoreApplication.translate("MainWindow", u"Import Schema...", None))
#if QT_CONFIG(tooltip)
        self.actionAdd_Schema.setToolTip(QCoreApplication.translate("MainWindow", u"Copy a schema into the tool storage.", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionAdd_Schema.setStatusTip(QCoreApplication.translate("MainWindow", u"Copy a schema into the tool storage.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.actionAdd_Schema.setWhatsThis(QCoreApplication.translate("MainWindow", u"Copy a schema into the tool storage.", None))
#endif // QT_CONFIG(whatsthis)
        self.actionPreferences.setText(QCoreApplication.translate("MainWindow", u"Preferences...", None))
#if QT_CONFIG(tooltip)
        self.actionPreferences.setToolTip(QCoreApplication.translate("MainWindow", u"Set preferences for the tool behaviour.", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionPreferences.setStatusTip(QCoreApplication.translate("MainWindow", u"Set preferences for the tool behaviour.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.actionPreferences.setWhatsThis(QCoreApplication.translate("MainWindow", u"Set preferences for the tool behaviour.", None))
#endif // QT_CONFIG(whatsthis)
        self.actionAbout.setText(QCoreApplication.translate("MainWindow", u"About", None))
        self.actionCreate_JSON_from_selected_Schema.setText(QCoreApplication.translate("MainWindow", u"Create Blank from selected schema", None))
#if QT_CONFIG(tooltip)
        self.actionCreate_JSON_from_selected_Schema.setToolTip(QCoreApplication.translate("MainWindow", u"Removes the current JSON and loads a blank from the selected schema.", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionCreate_JSON_from_selected_Schema.setStatusTip(QCoreApplication.translate("MainWindow", u"Removes the current JSON and loads a blank from the selected schema.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.actionCreate_JSON_from_selected_Schema.setWhatsThis(QCoreApplication.translate("MainWindow", u"Removes the current JSON and loads a blank from the selected schema.", None))
#endif // QT_CONFIG(whatsthis)
        self.actionValidate_input_against_selected_schema.setText(QCoreApplication.translate("MainWindow", u"Validate input against selected schema", None))
#if QT_CONFIG(tooltip)
        self.actionValidate_input_against_selected_schema.setToolTip(QCoreApplication.translate("MainWindow", u"Validate the current input against the schema.", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionValidate_input_against_selected_schema.setStatusTip(QCoreApplication.translate("MainWindow", u"Validate the current input against the schema.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.actionValidate_input_against_selected_schema.setWhatsThis(QCoreApplication.translate("MainWindow", u"Validate the current input against the schema.", None))
#endif // QT_CONFIG(whatsthis)
        self.actionSave_as_default.setText(QCoreApplication.translate("MainWindow", u"Save as default for selected schema", None))
#if QT_CONFIG(tooltip)
        self.actionSave_as_default.setToolTip(QCoreApplication.translate("MainWindow", u"Saves the current values as default for later use. The default is named after the schema!", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionSave_as_default.setStatusTip(QCoreApplication.translate("MainWindow", u"Saves the current values as default for later use. The default is named after the schema!", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.actionSave_as_default.setWhatsThis(QCoreApplication.translate("MainWindow", u"Saves the current values as default for later use. The default is named after the schema!", None))
#endif // QT_CONFIG(whatsthis)
        self.actionLoad_default_for_selected_schema.setText(QCoreApplication.translate("MainWindow", u"Load default for selected schema", None))
#if QT_CONFIG(tooltip)
        self.actionLoad_default_for_selected_schema.setToolTip(QCoreApplication.translate("MainWindow", u"Load default values from the Default storage of the tool.", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionLoad_default_for_selected_schema.setStatusTip(QCoreApplication.translate("MainWindow", u"Load default values from the Default storage of the tool.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.actionLoad_default_for_selected_schema.setWhatsThis(QCoreApplication.translate("MainWindow", u"Load default values from the Default storage of the tool.", None))
#endif // QT_CONFIG(whatsthis)
        self.actionReload_JSON_and_drop_Changes.setText(QCoreApplication.translate("MainWindow", u"Reload JSON and drop Changes...", None))
#if QT_CONFIG(tooltip)
        self.actionReload_JSON_and_drop_Changes.setToolTip(QCoreApplication.translate("MainWindow", u"Reload the JSON from the Drive and ommit all changes.", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionReload_JSON_and_drop_Changes.setStatusTip(QCoreApplication.translate("MainWindow", u"Reload the JSON from the Drive and ommit all changes.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.actionReload_JSON_and_drop_Changes.setWhatsThis(QCoreApplication.translate("MainWindow", u"Reload the JSON from the Drive and ommit all changes.", None))
#endif // QT_CONFIG(whatsthis)
        self.actionSave.setText(QCoreApplication.translate("MainWindow", u"Save", None))
#if QT_CONFIG(tooltip)
        self.actionSave.setToolTip(QCoreApplication.translate("MainWindow", u"Save the current JSON", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionSave.setStatusTip(QCoreApplication.translate("MainWindow", u"Save the current JSON", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.actionSave.setWhatsThis(QCoreApplication.translate("MainWindow", u"Save the current JSON", None))
#endif // QT_CONFIG(whatsthis)
        self.actionSave_as.setText(QCoreApplication.translate("MainWindow", u"Save as...", None))
#if QT_CONFIG(tooltip)
        self.actionSave_as.setToolTip(QCoreApplication.translate("MainWindow", u"Save the current JSON at a specific location of the computer. Does not overwrite the working directory.", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionSave_as.setStatusTip(QCoreApplication.translate("MainWindow", u"Save the current JSON at a specific location of the computer. Does not overwrite the working directory.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.actionSave_as.setWhatsThis(QCoreApplication.translate("MainWindow", u"Save the current JSON at a specific location of the computer. Does not overwrite the working directory.", None))
#endif // QT_CONFIG(whatsthis)
        self.actionCheck_indexes.setText(QCoreApplication.translate("MainWindow", u"Check indexes", None))
#if QT_CONFIG(tooltip)
        self.actionCheck_indexes.setToolTip(QCoreApplication.translate("MainWindow", u"Check all indexes and reindex, if needed.", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionCheck_indexes.setStatusTip(QCoreApplication.translate("MainWindow", u"Check all indexes and reindex, if needed.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.actionCheck_indexes.setWhatsThis(QCoreApplication.translate("MainWindow", u"Check all indexes and reindex, if needed.", None))
#endif // QT_CONFIG(whatsthis)
        self.curr_descr_label2.setText(QCoreApplication.translate("MainWindow", u"Current Schema:", None))
        self.Curr_dir_label.setText(QCoreApplication.translate("MainWindow", u"Search directory:", None))
        self.curr_descr_label.setText(QCoreApplication.translate("MainWindow", u"Current JSON:", None))
        self.curr_json_label.setText("")
#if QT_CONFIG(tooltip)
        self.pushButton_addSchema.setToolTip(QCoreApplication.translate("MainWindow", u"Adds a JSON Schema to the tool storage.", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.pushButton_addSchema.setStatusTip(QCoreApplication.translate("MainWindow", u"Adds a JSON Schema to the tool storage.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.pushButton_addSchema.setWhatsThis(QCoreApplication.translate("MainWindow", u"Adds a JSON Schema to the tool storage.", None))
#endif // QT_CONFIG(whatsthis)
        self.pushButton_addSchema.setText(QCoreApplication.translate("MainWindow", u"addSchema", None))
#if QT_CONFIG(tooltip)
        self.pushButton_search.setToolTip(QCoreApplication.translate("MainWindow", u"Search in the currently selected directory with the current Information entered.", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.pushButton_search.setStatusTip(QCoreApplication.translate("MainWindow", u"Search in the currently selected directory with the current Information entered.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.pushButton_search.setWhatsThis(QCoreApplication.translate("MainWindow", u"Search in the currently selected directory with the current Information entered.", None))
#endif // QT_CONFIG(whatsthis)
        self.pushButton_search.setText(QCoreApplication.translate("MainWindow", u"search", None))
#if QT_CONFIG(tooltip)
        self.pushButton_dirSel.setToolTip(QCoreApplication.translate("MainWindow", u"Add a new directory to be searchable.", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.pushButton_dirSel.setStatusTip(QCoreApplication.translate("MainWindow", u"Add a new directory to be searchable.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.pushButton_dirSel.setWhatsThis(QCoreApplication.translate("MainWindow", u"Add a new directory to be searchable.", None))
#endif // QT_CONFIG(whatsthis)
        self.pushButton_dirSel.setText(QCoreApplication.translate("MainWindow", u"dirSel", None))
#if QT_CONFIG(tooltip)
        self.pushButton_new.setToolTip(QCoreApplication.translate("MainWindow", u"Create a new JSON file from the current schema.", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.pushButton_new.setStatusTip(QCoreApplication.translate("MainWindow", u"Create a new JSON file from the current schema.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.pushButton_new.setWhatsThis(QCoreApplication.translate("MainWindow", u"Create a new JSON file from the current schema.", None))
#endif // QT_CONFIG(whatsthis)
        self.pushButton_new.setText(QCoreApplication.translate("MainWindow", u"new", None))
#if QT_CONFIG(tooltip)
        self.pushButton_open.setToolTip(QCoreApplication.translate("MainWindow", u"Open a JSON file for editing.", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.pushButton_open.setStatusTip(QCoreApplication.translate("MainWindow", u"Open a JSON file for editing.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.pushButton_open.setWhatsThis(QCoreApplication.translate("MainWindow", u"Open a JSON file for editing.", None))
#endif // QT_CONFIG(whatsthis)
        self.pushButton_open.setText(QCoreApplication.translate("MainWindow", u"open", None))
#if QT_CONFIG(tooltip)
        self.pushButton_save.setToolTip(QCoreApplication.translate("MainWindow", u"Save the current JSON file.", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.pushButton_save.setStatusTip(QCoreApplication.translate("MainWindow", u"Save the current JSON file.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.pushButton_save.setWhatsThis(QCoreApplication.translate("MainWindow", u"Save the current JSON file.", None))
#endif // QT_CONFIG(whatsthis)
        self.pushButton_save.setText(QCoreApplication.translate("MainWindow", u"save", None))
        self.label_curDir.setText(QCoreApplication.translate("MainWindow", u"TextLabel", None))
        self.menuFile.setTitle(QCoreApplication.translate("MainWindow", u"File", None))
        self.menuEdit.setTitle(QCoreApplication.translate("MainWindow", u"Edit", None))
        self.menuHelp.setTitle(QCoreApplication.translate("MainWindow", u"Help", None))
    # retranslateUi

